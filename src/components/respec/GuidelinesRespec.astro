---
import { isDevOrPreview } from "@/lib/constants";
import GuidelinesRespecDev from "./GuidelinesRespecDev.astro";

// ReSpec config and functions are defined in a component with an inline script to allow
// separating them in a way that will be conducive to sending to spec-generator, while
// avoiding Vite warnings which may occur when referencing scripts under public/
---

<script is:inline class="remove">
  function titleToPathFrag(title) {
    return title
      .toLowerCase()
      .replace(/[\s,]+/g, "-")
      .replace(/[\(\)]/g, "");
  }

  function findHeading(el) {
    return el.querySelector("h1, h2, h3, h4, h5, h6");
  }

  function findFirstTextChild(el) {
    var children = el.childNodes;
    for (i = 0; i < children.length; i++) {
      if (children[i].nodeType == 3) {
        return children[i];
      }
    }
  }

  function textNoDescendant(el) {
    var textContent = "";
    el.childNodes.forEach(function (node) {
      if (node.nodeType == 3) textContent += node.textContent;
    });
    return textContent;
  }

  function sentenceCase(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  function pathToName(path) {
    return sentenceCase(path.replace(/-/g, " "));
  }

  function addSummaryMarkers() {
    document.querySelectorAll(".summary").forEach(function (node) {
      var parentHeader = findHeading(node.parentElement);
      var summaryHeader = node.querySelector("summary");
      var extraTitle = "";
      if (summaryHeader.textContent.toLowerCase() != "summary")
        extraTitle = " - " + summaryHeader.textContent;
      summaryHeader.innerHTML =
        "Plain language summary of <q>" + textNoDescendant(parentHeader) + "</q>" + extraTitle;

      var el = document.createElement("p");
      el.className = "summaryEnd";
      el.innerHTML = "End of summary for <q>" + textNoDescendant(parentHeader) + "</q>";
      node.appendChild(el);
    });
  }

  var statusLabels = {
    placeholder: "We will be addressing this topic.",
    exploratory: "We are exploring one or more possible directions for this content.",
    developing: "We have high confidence in the direction and some confidence in the details.",
    refining: "We have high confidence in the direction and moderate confidence in the details.",
    mature: "We believe the content is ready to become a W3C Recommendation.",
  };

  function addStatusMarkers() {
    var statusKeys = Object.keys(statusLabels);
    statusKeys.forEach(function (status) {
      var headingSelector = '[data-status="' + status + '"] > .header-wrapper';
      var headings = document.querySelectorAll(headingSelector);
      headings.forEach(function (heading) {
        var statusMarker = document.createElement("span");
        statusMarker.classList.add("status-marker");
        statusMarker.innerHTML = sentenceCase(status);
        heading.firstElementChild.insertAdjacentElement("beforeend", statusMarker);
      });

      var dfnSelector = '[data-status="' + status + '"] > dfn';
      var dfns = document.querySelectorAll(dfnSelector);
      dfns.forEach(function (dfn) {
        var statusMarker = document.createElement("span");
        statusMarker.classList.add("status-marker");
        statusMarker.innerHTML = sentenceCase(status);
        dfn.insertAdjacentElement("beforeend", statusMarker);
      });
    });
  }

  function addRequirementType() {
    var requirements = document.querySelectorAll(".requirement");
    requirements.forEach(function (requirement) {
      var requirementType = requirement.getAttribute("data-requirement-type");
      var preText = document.createElement("span");
      var heading = requirement.querySelector("h5");
      preText.classList.add("requirement-type");
      if (requirementType == "assertion") {
        preText.innerHTML = "Assertion: ";
      } else if (requirementType == "foundational" || requirementType == "supplemental") {
        preText.innerHTML = sentenceCase(requirementType) + " requirement: ";
      } else {
        preText.innerHTML = "Requirement: ";
      }
      heading.insertAdjacentElement("afterbegin", preText);
    });
  }

  function removeDraftMethodLinks() {
    document.querySelectorAll(".method-link").forEach(function (node) {
      uri = node.href;
      if (!uri.startsWith("https://www.w3.org")) {
        node.parentElement.innerHTML = node.textContent;
      }
    });
  }

  function adjustNormativity() {
    document.querySelectorAll("body > section").forEach(function (node) {
      if (node.classList.contains("informative")) {
        var normativeStatement = node.querySelector("p");
        normativeStatement.classList.add("informative-statement");
        normativeStatement.innerHTML =
          '<em>This section (with its subsections) provides advice only and does not specify guidelines, meaning it is <a href="#dfn-informative" class="internalDFN" data-link-type="dfn">informative</a> or non-normative.</em>';
      } else if (
        node.id != "abstract" &&
        node.id != "sotd" &&
        !node.classList.contains("appendix")
      ) {
        var el = document.createElement("p");
        el.className = "normative-statement";
        el.innerHTML =
          '<em>This section (with its subsections) provides requirements which must be followed to <a>conform</a> to the specification, meaning it is <a href="#dfn-normative" class="internalDFN" data-link-type="dfn">normative</a>.</em>';
        var heading = findHeading(node);
        while (heading.parentNode !== node) {
          heading = heading.parentNode;
        }
        node.insertBefore(el, heading.nextSibling);
      }
    });
  }

  function adjustDfnData() {
    document.querySelectorAll("dfn").forEach(function (node) {
      var curVal = node.getAttribute("data-lt");
      if (curVal == null) curVal = "";
      node.setAttribute("data-lt", node.textContent + (curVal == "" ? "" : "|") + curVal);
    });
  }

  const findParentSectionOrDefinition = (el) => el.closest("dd") || el.closest("section");

  /** Numbers notes when there are multiple in one section. */
  function numberNotes() {
    // Include :has to skip editor's notes
    const noteSelector = ".note:has(.note-title span)";
    const sectionsWithNotes = new Set();
    document.querySelectorAll(noteSelector).forEach((note) => {
      sectionsWithNotes.add(findParentSectionOrDefinition(note));
    });

    sectionsWithNotes.forEach((sec) => {
      const notes = Array.from(sec.querySelectorAll(noteSelector)).filter(
        // Only process direct descendants
        (el) => findParentSectionOrDefinition(el) === sec
      );
      // Leave single note alone; 0 notes shouldn't happen based on previous loop
      if (notes.length < 2) return;
      // Number multiple notes
      notes.forEach((note, i) => {
        const span = note.querySelector(".note-title span");
        span.textContent = "Note " + (i + 1);
      });
    });
  }

  /**
   * Changes the numbering of examples to remove number from a lone example in a section,
   * and restart numbering for multiple in each section.
   */
  function renumberExamples() {
    const sectionsWithExamples = new Set();
    document.querySelectorAll(".example").forEach((example) => {
      sectionsWithExamples.add(findParentSectionOrDefinition(example));
    });

    sectionsWithExamples.forEach((sec) => {
      const examples = Array.from(sec.querySelectorAll(".example")).filter(
        // Only process direct descendants
        (el) => findParentSectionOrDefinition(el) === sec
      );
      // No examples shouldn't happen based on previous loop
      if (!examples.length) return;
      // Remove numbering on single example, or update numbering on multiple
      const rmOrAdd = examples.length === 1 ? "rm" : "add";
      sec.querySelectorAll(".example").forEach((example, i) => {
        var marker = example.querySelector(".marker");
        if (rmOrAdd == "rm") marker.textContent = "Example";
        else marker.textContent = "Example " + (i + 1);
      });
    });
  }

  // somewhere along the chain image sizes are being added where I don't want them, doesn't happen locally
  function removeImgSize() {
    document.querySelectorAll("img").forEach(function (node) {
      if (node.getAttribute("src").endsWith(".svg")) {
        node.removeAttribute("width");
        node.removeAttribute("height");
      }
    });
  }

  function removeRequirementNum() {
    var tocEl = document
      .querySelector('.tocline > a[href="#guidelines"]')
      .parentNode.querySelector("ol");
    tocEl.querySelectorAll("ol ol ol ol bdi.secno").forEach(function (node) {
      node.remove();
    });

    document.querySelectorAll(".requirement bdi.secno").forEach(function (node) {
      node.remove();
    });
  }

  function outputJson() {
    const params = new URLSearchParams(window.location.search);
    if (params.get("json") != null) {
      var result = new Object();
      result.guidelines = new Array();
      document.querySelectorAll(".guideline").forEach(function (glnode) {
        var gl = {
          id: titleToPathFrag(findFirstTextChild(findHeading(glnode)).textContent),
          name: findFirstTextChild(findHeading(glnode)).textContent,
          guideline: findFirstTextChild(glnode.querySelector("p")).textContent,
        };
        gl.outcomes = new Array();
        glnode.querySelectorAll(".outcome").forEach(function (ocnode) {
          var ocid = titleToPathFrag(findFirstTextChild(findHeading(ocnode)).textContent);
          var oc = {
            id: ocid,
            name: findFirstTextChild(findHeading(ocnode)).textContent,
            outcome: findFirstTextChild(ocnode.querySelector("p")).textContent,
            methods: loadMethods(ocid),
          };
          gl.outcomes.push(oc);
        });
        result.guidelines.push(gl);
      });

      var a = document.createElement("a");
      var file = new Blob([JSON.stringify(result)], { type: "application/json" });
      a.href = URL.createObjectURL(file);
      a.download = "wcag3.json";
      a.click();
    }

    function loadMethods(path) {
      var returnVal;
      var ocpath = "../outcomes/" + path + ".html";
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
          methodList = new Array();
          xml = xhttp.responseXML;
          xml.querySelectorAll(".method-link").forEach(function (node) {
            var methodid = node.href.match(/\/([a-z-]*)\/$/)[1];
            var method = {
              id: methodid,
              name: pathToName(methodid),
              method: node.textContent,
            };
            methodList.push(method);
          });
          returnVal = methodList;
        }
      };
      xhttp.open("GET", ocpath, false);
      xhttp.overrideMimeType("text/xml");
      xhttp.send();

      return returnVal;
    }
  }

  respecConfig = {
    // embed RDFa data in the output
    trace: true,
    doRDFa: "1.1",
    includePermalinks: true,
    permalinkEdge: true,
    permalinkHide: false,
    // specification status (e.g., WD, LC, NOTE, etc.). If in doubt use ED.
    specStatus: "ED",
    //crEnd:                "2012-04-30",
    //perEnd:               "2013-07-23",
    publishDate: "2024-12-12",

    // the specifications short name, as in https://www.w3.org/TR/short-name/
    shortName: "wcag-3.0",

    // if you wish the publication date to be other than today, set this
    // publishDate:  "2009-08-06",
    copyrightStart: "2021",
    license: "document",

    // if there a publicly available Editors Draft, this is the link
    edDraftURI: "https://w3c.github.io/wcag3/guidelines/",

    // if this is a LCWD, uncomment and set the end of its review period
    // lcEnd: "2012-02-21",

    // editors, add as many as you like
    // only "name" is required
    editors: [
      {
        name: "Rachael Bradley Montgomery",
        mailto: "rmontgomery@loc.gov",
        company: "Library of Congress",
        companyURI: "loc.gov/",
        w3cid: 90310,
      },
      {
        name: "Chuck Adams",
        mailto: "charles.adams@oracle.com",
        company: "Oracle",
        companyURI: "https://www.oracle.com/",
        w3cid: 104852,
      },
      {
        name: "Alastair Campbell",
        mailto: "acampbell@nomensa.com",
        company: "Nomensa",
        companyURI: "https://www.nomensa.com/",
        w3cid: 44689,
      },
      {
        name: "Kevin White",
        mailto: "kevin@w3.org",
        company: "W3C",
        companyURI: "https://www.w3.org/",
        w3cid: 71819,
      },
      {
        name: "Jeanne Spellman",
        mailto: "jspellman@spellmanconsulting.com",
        company: "TetraLogical",
        companyURI: "https://tetralogical.com/",
        w3cid: 42417,
      },
      {
        name: "Francis Storr",
        mailto: "francis.storr@intel.com",
        company: "Intel Corporation",
        companyURI: "https://intel.com/",
        w3cid: 90883,
      },
    ],

    formerEditors: [
      {
        name: "Michael Cooper, Staff Contact, 2016-2023",
        company: "W3C",
        companyURI: "https://www.w3.org/",
        w3cid: 34017,
      },
      {
        name: "Shawn Lauriat, Editor, 2016-2023",
        company: "Google, Inc.",
        companyURI: "https://www.google.com/",
        w3cid: 90646,
      },
      {
        name: "Wilco Fiers, Project Manager, 2021-2023",
        company: "Deque Systems, Inc.",
        companyURI: "https://www.deque.com/",
        w3cid: 43334,
      },
    ],

    // authors, add as many as you like.
    // This is optional, uncomment if you have authors as well as editors.
    // only "name" is required. Same format as editors.

    //authors:  [
    //    { name: "Your Name", url: "http://example.org/",
    //      company: "Your Company", companyURI: "http://example.com/" },
    //],

    /*
    alternateFormats: [
    { uri: 'aria-diff.html', label: "Diff from Previous Recommendation" } ,
    { uri: 'aria.ps', label: "PostScript version" },
    { uri: 'aria.pdf', label: "PDF version" }
    ],
    */

    // errata: 'https://www.w3.org/2010/02/rdfa/errata.html',

    group: "ag",
    github: "w3c/wcag3",

    // name (without the @w3.org) of the public mailing to which comments are due
    wgPublicList: "public-agwg-comments",

    maxTocLevel: 4,

    preProcess: [addSummaryMarkers, adjustDfnData],
    postProcess: [
      adjustNormativity,
      removeDraftMethodLinks,
      removeRequirementNum,
      addRequirementType,
      addStatusMarkers,
      numberNotes,
      renumberExamples,
      removeImgSize,
      outputJson,
    ],

    localBiblio: {
      "WCAG3-requirements": {
        title: "Requirements for WCAG 3.0",
        publisher: "World Wide Web Consortium",
        date: "8 November 2024",
        href: "https://www.w3.org/TR/wcag-3.0-requirements-20241108/",
      },

      "WCAG3-explainer": {
        title: "Explainer for W3C Accessibility Guidelines (WCAG) 3.0",
        publisher: "World Wide Web Consortium",
        date: "8 November 2024",
        href: "https://www.w3.org/TR/wcag-3.0-explainer-20241108/",
      },

      "508-criteria": {
        title: "Section 508 Functional Performance Criteria",
        publisher: "United States Access Board",
        date: "8 December 2011",
        href: "https://www.access-board.gov/ict/#chapter-3-functional-performance-criteria",
      },
      "en-301-549": {
        title:
          "Accessibility requirements suitable for public procurement of ICT products and services in Europe",
        publisher: "European Telecommunications Standards Institute",
        date: "February 2014",
        href: "https://www.etsi.org/deliver/etsi_tr/101500_101599/101550/01.01.01_60/tr_101550v010101p.pdf",
      },
      "iso13066-1": {
        href: "https://www.iso.org/standard/53770.html",
        title:
          "Information technology — Interoperability with assistive technology (AT) - Part 1: Requirements and recommendations for interoperability",
        status: "Published",
        publisher: "ISO/IEC",
        isoNumber: "ISO 13066-1:2011",
        rawDate: "2011-05",
      },
    },
  };
</script>
{isDevOrPreview && <GuidelinesRespecDev />}
